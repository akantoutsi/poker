{"version":3,"sources":["components/Card/Card.js","containers/Board/Board.js","store/actionTypes.js","components/Player/Player.js","containers/Players/Players.js","containers/Table/Table.js","App.js","serviceWorker.js","store/reducers/tableReducer.js","store/utils.js","store/reducers/playersReducer.js","store/reducers/boardReducer.js","index.js"],"names":["Card","props","cardClass","push","value","toLowerCase","suit","cardUnicode","afro","react_default","a","createElement","className","join","concat","String","fromCharCode","Board","shuffleCards","arr","i","length","rnd","Math","random","tmp","getRank","obj","property","parseInt","boardCards","_this2","this","allCards","cards","player","firstPlayerId","j","dealerId","_","cloneDeep","brd","initCards","map","elem","rank","isVisible","_loop","smallBlindId","tbl","bigBlindId","nextPlayerId","cash","floor","actionTypes","slice","Object","objectSpread","belongsTo","seq","isActive","nextPlayer","pot","potNotLessThan","maxPot","changedPot","smallBlindAmount","isDealer","isSmallBlind","isBigBlind","previousPot","card","index","key","components_Card_Card","onClick","round","resetBoardCards","resetPlayers","setDealer","storeBoardCards","startGame","updatePotsNumber","storePlayersCards","setFirstPlayer","updateCurrentPot","resetTablePot","setTablePot","Component","connect","state","table","board","dispatch","type","payload","playersCards","Player","playerId","classes","nextPlayerBtns","incrementPot","style","margin","decrementPot","resetFirstPlayer","exitGame","setNextPlayer","id","color","Players","_this","plr","players","components_Player_Player","Table","groupByProperty","ourArray","reduce","accumulator","object","sortArray","sort","b","formatCards","cardsToFormat","grpCardsBySuit","tmpGroupedCardsByValue","freq","grpCardsByValue","entries","getWinner","printWinners","groupedArr","acc","el","typeOfCombination","sortedGroupedArr","undefined","filter","includes","getWinnerIds","result","winnerIds","winnerCards","openBoardCards","console","log","openAllBoardCards","potsCount","areAllBoardCardsOpen","resetOpenCardsFlags","resetPotsNumber","setNoneAsNextPlayer","checkForWinner","alert","updatedBoardCards","possibleWinners","isBoard","winCombinations","comb","cardCombinations","code","get","resetWinners","resetRound","tablePot","containers_Players_Players","containers_Board_Board","openAll","cardsBySuit","cardsByValue","App","containers_Table_Table","Boolean","window","location","hostname","match","initialState","title","tableReducer","arguments","action","updateObjectInArray","array","item","findMaxPot","max","allHaveSamePot","currentPot","sameCardExistsNtimes","res","find","e","containsStraight","firstElem","findWinner","bySuit","byValues","groupedCardsBySuit","groupedCardsByValue","winCombination","cardToCheck","set","fours","threes","copiedGroupedCardsByValue","indexOf","splice","twos","newGrp","possibleStraight","copiedGrpCardsByValue","toCheck","threeOfKind","findCombination","acceptedCombinations","canUpdateTablePot","alreadyOpenedCards","howManyPlayersChecked","playersReducer","restPlayers","currentPlayer","activePlayers","toConsumableArray","smallBlindPlayer","pl","bigBlindPlayer","abs","findIndex","tmpSuits","tmpValues","s","v","createCards","numOfPlayers","boardReducer","updatedCards","openAllFlag","cardsClosed","checkIfCardsLeftToToOpen","howManyToOpen","fromIndex","retArr","_retArr5","_retArr6","slicedToArray","first","second","third","fourth","fifth","_retArr","_retArr2","_retArr3","cardsToOpen","rootReducer","combineReducers","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c5b89b1.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n    let cardClass = ['card'];\n\n    cardClass.push('rank-' + props.value.toLowerCase());\n    cardClass.push(props.suit);\n\n    let cardUnicode = (props.suit === 'spades') ? 'U+2660' : \n                      (props.suit === 'clubs')  ? 'U+2663' : \n                      (props.suit === 'hearts') ? 'U+2665' : 'U+2666';\n\n    if (!props.afro) {\n        return (\n            <div className={cardClass.join(' ')}>\n                <span className='rank'>{props.value}</span>\n                <span className='suit'>{String.fromCharCode(cardUnicode)}</span>\n            </div>\n        );\n    \n    } else {\n        return (\n            <div className={cardClass.join(' ')}>\n                <strong>\n                    <span className={`card rank-${props.value.toLowerCase()} ${props.suit}`}>    \n                        <span className='rank'>{props.value}</span>\n                        <span className='suit'>{String.fromCharCode(cardUnicode)}</span>\n                    </span>\n                </strong>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport { connect }          from 'react-redux';\nimport Card                 from '../../components/Card/Card';\nimport _                    from 'lodash';\nimport * as actionTypes     from '../../store/actionTypes';\n\nimport './Board.css';\n\nclass Board extends Component {\n    shuffleCards = arr => {\n        for (let i = 0; i < arr.length; i++) {\n          const rnd = Math.random() * i | 0;\n          const tmp = arr[i];\n          arr[i]    = arr[rnd];\n          arr[rnd]  = tmp;\n        }\n        return arr;\n    };\n\n    getRank = (obj, property) => {\n        let rank = 0;\n        \n        if (obj[property] === 'J') {\n            rank = 11;  \n        } else if (obj[property] === 'Q') {\n            rank = 12;  \n        } else if (obj[property] === 'K') {\n            rank = 13;  \n        } else if (obj[property] === 'A') {\n            rank = 14;  \n        } else {\n            rank = parseInt(obj[property]);\n        }\n        \n        return rank;\n    };\n\n    render() { \n        const allCards  = <div className='card back'>*</div>;\n        \n        let cards         = [];\n        let player        = [];\n        let boardCards    = [];\n        let firstPlayerId = null;\n        let j             = 0;\n        let dealerId      = -1;\n\n        cards = _.cloneDeep(this.props.brd.initCards);\n        cards.map(elem => elem.rank = this.getRank(elem, 'value'));\n        cards.map(elem => elem.isVisible = false);\n        this.shuffleCards(cards);\n\n        for (let i=0; i<actionTypes.NUM_OF_PLAYERS; i++) {\n            dealerId          = (this.props.tbl.dealerId + 1 >= actionTypes.NUM_OF_PLAYERS) \n                              ?  this.props.tbl.dealerId + 1 - actionTypes.NUM_OF_PLAYERS \n                              :  this.props.tbl.dealerId + 1\n\n            let smallBlindId  = (dealerId + 1 >= actionTypes.NUM_OF_PLAYERS) \n                              ?  dealerId + 1 - actionTypes.NUM_OF_PLAYERS     \n                              :  dealerId + 1;\n\n            let bigBlindId    = (dealerId + 2 >= actionTypes.NUM_OF_PLAYERS) \n                              ?  dealerId + 2 - actionTypes.NUM_OF_PLAYERS \n                              :  dealerId + 2;\n\n            firstPlayerId     = (bigBlindId + 1 >= actionTypes.NUM_OF_PLAYERS)\n                              ?  bigBlindId + 1 - actionTypes.NUM_OF_PLAYERS \n                              :  bigBlindId + 1;\n\n            let nextPlayerId  = (bigBlindId + 1 >= actionTypes.NUM_OF_PLAYERS) \n                              ?  bigBlindId + 1 - actionTypes.NUM_OF_PLAYERS\n                              :  bigBlindId + 1\n\n            let cash = Math.floor(Math.random() * (20 - actionTypes.SMALL_BLIND_AMOUNT*2)) + (actionTypes.SMALL_BLIND_AMOUNT*2);                    \n\n            player.push({\n                cards           : cards.slice(i+j, i+j+2).map(elem => ({...elem, belongsTo: i})),\n                seq             : i,\n                cash            : (smallBlindId === i) ? cash - actionTypes.SMALL_BLIND_AMOUNT : \n                                    (bigBlindId === i) ? cash - actionTypes.SMALL_BLIND_AMOUNT*2 : cash,\n                isActive        : 1,\n                nextPlayer      : (i === nextPlayerId) ? 1 : 0,\n                pot             : 0,\n                potNotLessThan  : 0,\n                maxPot          : cash,\n                changedPot      : 0,\n                smallBlindAmount: actionTypes.SMALL_BLIND_AMOUNT,\n                isDealer        : dealerId === i,\n                isSmallBlind    : smallBlindId === i,\n                isBigBlind      : bigBlindId === i,\n                previousPot     : (smallBlindId === i) ? actionTypes.SMALL_BLIND_AMOUNT : \n                                    (bigBlindId === i) ? actionTypes.SMALL_BLIND_AMOUNT*2 : 0\n            });\n            j += 1;\n        }\n\n        boardCards = cards.slice(j*2, (j*2)+5);\n\n        return (\n            <div className='Board'> \n                {\n                    this.props.brd.cards.map((card, index) => {\n                        return (\n                            <div className='playingCards' key={index}>\n                                {   \n                                    (!card.isVisible)\n                                    ? <div className='card back'>*</div>\n                                    : <Card value={card.value} suit={card.suit} />\n                                    \n                                }\n                            </div>\n                        );\n                    })\n                }\n\n                <div className='playingCards all-cards' \n                    onClick={() => this.props.tbl.round === 0 ? (this.props.resetBoardCards(),\n                                                                 this.props.resetPlayers(),\n                                                                 this.props.setDealer(dealerId),\n                                                                 this.props.storeBoardCards(boardCards), \n                                                                 this.props.startGame(), \n                                                                 this.props.updatePotsNumber(),\n                                                                 this.props.storePlayersCards(player),\n                                                                 this.props.setFirstPlayer(firstPlayerId),\n                                                                 this.props.updateCurrentPot(),\n                                                                 this.props.resetTablePot(),\n                                                                 this.props.setTablePot()) : null}>\n                   \n                    {allCards}\n                    <div className='clear'></div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        tbl: state.table,\n        brd: state.board\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setDealer        : (dealerId)      => dispatch({type: actionTypes.SET_DEALER,                       payload: dealerId}),\n        storeBoardCards  : (boardCards)    => dispatch({type: actionTypes.STORE_BOARD_CARDS,                payload: boardCards}),\n        startGame        : ()              => dispatch({type: actionTypes.START_GAME}),\n        updatePotsNumber : ()              => dispatch({type: actionTypes.UPDATE_POTS_COUNT}),\n        storePlayersCards: (playersCards)  => dispatch({type: actionTypes.STORE_PLAYERS_CARDS,              payload: playersCards}),\n        setFirstPlayer   : (firstPlayerId) => dispatch({type: actionTypes.SET_FIRST_PLAYER,                 payload: firstPlayerId}),\n        updateCurrentPot : ()              => dispatch({type: actionTypes.UPDATE_ALL_PLAYERS_CURRENT_POT}),\n        resetTablePot    : ()              => dispatch({type: actionTypes.RESET_TABLE_POT}),\n        setTablePot      : ()              => dispatch({type: actionTypes.SET_TABLE_POT}),\n        resetBoardCards  : ()              => dispatch({type: actionTypes.RESET_BOARD_CARDS}),\n        resetPlayers     : ()              => dispatch({type: actionTypes.RESET_PLAYERS}),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);","export const DEALER_ID                      = 0;\nexport const NUM_OF_PLAYERS                 = 4;\nexport const SMALL_BLIND_AMOUNT             = 2;\nexport const SET_FIRST_PLAYER               = 'SET_FIRST_PLAYER';\n\nexport const STORE_PLAYERS_CARDS            = 'STORE_PLAYERS_CARDS';\nexport const STORE_BOARD_CARDS              = 'STORE_BOARD_CARDS';\nexport const INCREMENT_PLAYER_POT           = 'INCREMENT_PLAYER_POT';\nexport const DECREMENT_PLAYER_POT           = 'DECREMENT_PLAYER_POT';\nexport const UPDATE_PLAYER_POT              = 'UPDATE_PLAYER_POT';\nexport const UPDATE_ALL_PLAYERS_CURRENT_POT = 'UPDATE_ALL_PLAYERS_CURRENT_POT';\nexport const DEAL_CARDS                     = 'DEAL_CARDS';\nexport const SET_NEXT_PLAYER                = 'SET_NEXT_PLAYER';\nexport const RESET_FIRST_PLAYER             = 'RESET_FIRST_PLAYER';\nexport const EXIT_GAME                      = 'EXIT_GAME';\nexport const OPEN_CARDS                     = 'OPEN_CARDS';\nexport const RESET_OPEN_CARDS_FLAGS         = 'RESET_OPEN_CARDS_FLAGS';\nexport const ALL_BOARD_CARDS_OPEN           = 'ALL_BOARD_CARDS_OPEN';\nexport const GET_WINNER                     = 'GET_WINNER';\nexport const RESET_ROUND                    = 'RESET_ROUND';\nexport const RESET_PLAYERS                  = 'RESET_PLAYERS';\nexport const START_GAME                     = 'START_GAME';\nexport const RESET_WINNERS                  = 'RESET_WINNERS';\nexport const RESET_BOARD_CARDS              = 'RESET_BOARD_CARDS';\nexport const SET_DEALER                     = 'SET_DEALER';\nexport const SET_TABLE_POT                  = 'SET_TABLE_POT';\nexport const RESET_TABLE_POT                = 'RESET_TABLE_POT';\nexport const UPDATE_POTS_COUNT              = 'UPDATE_POTS_COUNT'; \nexport const OPEN_BOARD_CARDS               = 'OPEN_BOARD_CARDS';\nexport const RESET_POTS_COUNT               = 'RESET_POTS_COUNT';\nexport const NONE_NEXT_PLAYER               = 'NONE_NEXT_PLAYER';\n","import React from 'react';\nimport Card  from '../Card/Card';\n\nimport './Player.css';\n\nconst Player = props => {\n    const playerId = props.player.seq + 1;\n    let classes    = [];\n    classes.push((props.player.isActive === 0) ? 'inactive-player' : null);\n\n    let nextPlayerBtns = null;\n\n    if (props.nextPlayer === props.player.seq) {\n        nextPlayerBtns = (\n            <div className='pot-btns'>\n                <button className='update-pot-btn' onClick={() => props.incrementPot(props.player.seq)}>+</button> \n\n                <div style={{margin: '18px'}}>{props.player.pot}</div>\n\n                <button className='update-pot-btn' onClick={() => props.decrementPot(props.player.seq)}>-</button>\n                \n                <button className='exit-btn' onClick={() => {props.resetFirstPlayer(); props.exitGame(props.player.seq)}}>\n                    <i className='fa fa-close'></i>\n                </button> \n\n                <button className='next-btn' onClick={() => {props.resetFirstPlayer(); \n                                                             props.setNextPlayer(props.player.seq);\n                                                             props.updateCurrentPot(); \n                                                             props.setTablePot();\n                                                            }}>                                                         \n                    <strong>{`Next`}</strong>\n                </button> \n            </div>\n        );\n    }\n    \n    return ( \n        <div id={'player-' + playerId} className='player-info'>  \n            <strong style={{color: 'red'}}>{`${props.player.isDealer ? 'D' : ''}`}</strong>\n            <div className='center-player-info'> \n                {/* <strong className={classes.join(' ')}>{`Player ${props.player.seq + 1} ${props.player.isDealer ? '(Dealer)' : ''}`}</strong> */}\n                <strong className={classes.join(' ')}>{`Player ${props.player.seq + 1}`}</strong>\n                <hr />\n                <div className={classes.join(' ')}>\n                    {`Cash: €${props.player.cash} - Pot: €${props.player.pot}`}\n                </div>\n            </div>\n\n            <div className='center-player-info center-player-btns'> \n                {nextPlayerBtns}\n            </div>\n\n            <div className='center-player-info-cards'>\n                {\n                    props.player.cards.map((card, index) => {\n                        return (\n                            <div key={index}>\n                                <div className='playingCards'>\n                                    <Card value={card.value} suit={card.suit} />\n                                </div>\n                            </div>\n                        );\n                    })\n            }\n            </div>\n        </div>\n    );\n}\n\nexport default Player;","import React, { Component } from 'react';\nimport { connect }          from 'react-redux'; \nimport Player               from '../../components/Player/Player';\nimport * as actionTypes     from '../../store/actionTypes';\n\nimport './Players.css';\n\nclass Players extends Component {\n    render() { \n        return (\n            <div> \n            {\n                this.props.plr.players.map((player, index) => {\n                    return (\n                        <div key={index}>\n                            <Player player={player} \n                                    nextPlayer      ={(this.props.firstPlayerId !== null) \n                                                    ? this.props.firstPlayerId \n                                                    : ( (player.nextPlayer === 1) ? player.seq : null )}\n                                    incrementPot    ={(playerId) => this.props.incrementPot(playerId)} \n                                    decrementPot    ={(playerId) => this.props.decrementPot(playerId)} \n                                    exitGame        ={(playerId) => this.props.exitGame(playerId)} \n                                    setNextPlayer   ={(playerId) => this.props.setNextPlayer(playerId)}\n                                    updateCurrentPot={()         => this.props.updateCurrentPot()}\n                                    setTablePot     ={()         => this.props.setTablePot()}\n                                    resetFirstPlayer={()         => this.props.resetFirstPlayer()} />\n                        </div>\n                    );\n                })\n            }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        round        : state.table.round,\n        plr          : state.players,\n        firstPlayerId: state.board.firstPlayerId\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        incrementPot    : (playerId) => dispatch({type: actionTypes.INCREMENT_PLAYER_POT, payload:    playerId}),\n        decrementPot    : (playerId) => dispatch({type: actionTypes.DECREMENT_PLAYER_POT, payload:    playerId}),\n        exitGame        : (playerId) => dispatch({type: actionTypes.EXIT_GAME,                        payload: playerId}),\n        updateCurrentPot: ()         => dispatch({type: actionTypes.UPDATE_ALL_PLAYERS_CURRENT_POT}),\n        setTablePot     : ()         => dispatch({type: actionTypes.SET_TABLE_POT}),\n        setNextPlayer   : (playerId) => dispatch({type: actionTypes.SET_NEXT_PLAYER,                  payload: playerId}),\n        resetFirstPlayer: ()         => dispatch({type: actionTypes.RESET_FIRST_PLAYER})\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Players);\n","import React, { Component } from 'react';\nimport { connect }          from 'react-redux'; \nimport _                    from 'lodash';\nimport Board                from '../Board/Board';\nimport Players              from '../Players/Players';\nimport * as actionTypes     from '../../store/actionTypes';\n  \nimport './Table.css';\n\nclass Table extends Component {\n\n    groupByProperty = (ourArray, property) => {\n        return ourArray.reduce(function (accumulator, object) {\n            const key = object[property];\n    \n            if (!accumulator[key]) {\n                accumulator[key] = [];\n            }\n    \n            accumulator[key].push(object);\n    \n            return accumulator;\n        }, {});\n    }\n\n    sortArray = (arr, property) => {\n        const res = arr.sort((a, b) => a.rank < b.rank ? 1 : -1);\n      \n        return res;\n    }\n\n    formatCards = (cardsToFormat) => {\n        let cards                  = this.sortArray(cardsToFormat, 'rank');  \n        let grpCardsBySuit         = this.groupByProperty(cards, 'suit');\n        let tmpGroupedCardsByValue = this.groupByProperty(cards, 'rank');\n\n        for (let elem in tmpGroupedCardsByValue) { \n            tmpGroupedCardsByValue[elem].freq = tmpGroupedCardsByValue[elem].length; \n        }\n\n        let grpCardsByValue = Object.entries(tmpGroupedCardsByValue);\n        this.sortArray(grpCardsByValue, grpCardsByValue[1]);\n\n        this.props.getWinner(grpCardsBySuit, grpCardsByValue);\n    }\n\n    printWinners = (arr) => {\n        let grouped = arr.map(elem => {\n            return elem.reduce((acc, el) => {\n                const key = el.typeOfCombination;\n            \n                if (!acc[key]) {\n                    acc[key] = [];\n                }\n        \n                acc[key].push(el);\n        \n                return acc;\n            }, {});\n        });\n          \n        let groupedArr = grouped.map(elem => Object.entries(elem));\n        groupedArr.map(elem => elem[0][0] = parseInt(elem[0][0]));\n        \n        let sortedGroupedArr   = groupedArr.reduce((acc, el) => { acc[0] = (acc[0] === undefined || el[0][0] < acc[0]) ? el[0][0] : acc[0]; return acc; }, []);\n        let groupedArrFiltered = groupedArr.filter(elem => elem[0].includes(sortedGroupedArr[0]));\n        let res                = groupedArrFiltered.map(elem => elem[0][1]);\n\n        return res;\n    }\n\n    getWinnerIds = (arr) => {\n        return arr.map(elem => {\n            return elem[0].reduce((acc, el) => { \n                acc = (el.belongsTo !== 'board') ? parseInt(el.belongsTo) : 'board';  \n                return acc; \n            }, -1);\n        });\n    }     \n\n    render() {\n        let result      = [];\n        let winnerIds   = [];\n        let winnerCards = [];\n\n        if (this.props.plr.openBoardCards) {\n            console.log('open next card');\n            this.props.updatePotsNumber();\n            this.props.openAllBoardCards(0);\n            \n            if (this.props.plr.potsCount >= 5) {\n                this.props.areAllBoardCardsOpen();\n            }\n\n            this.props.resetOpenCardsFlags();\n        }\n\n        if (this.props.plr.openAllBoardCards) {\n            console.log('open all cards');\n            this.props.updatePotsNumber();\n            this.props.openAllBoardCards(1);\n            this.props.areAllBoardCardsOpen();\n            this.props.resetOpenCardsFlags();\n        }\n\n        if (this.props.plr.potsCount >= 5) {\n            console.log('check for winner no matter what');\n            this.props.resetPotsNumber();\n            this.props.openAllBoardCards(1);\n            this.props.areAllBoardCardsOpen();\n            this.props.resetOpenCardsFlags();\n            this.props.setNoneAsNextPlayer();\n        }\n\n        if (this.props.brd.checkForWinner) {\n            alert('all cards open - check for winner');\n            this.props.resetPotsNumber();\n            let updatedBoardCards = this.props.brd.cards.slice();\n\n            let cardsToCheck = this.props.plr.possibleWinners.map(elem => {\n                return elem.cards.concat(updatedBoardCards.map(el => ({...el, belongsTo: elem.cards[0].belongsTo, isBoard: true})));\n            });\n\n            cardsToCheck.map(el => this.formatCards(el));\n        }\n\n        result = this.printWinners(this.props.brd.winCombinations);\n\n        if (result.length >= 1) {\n            winnerIds = this.getWinnerIds(result);\n            console.log(winnerIds);\n\n            if (result.length > 0) {\n                let comb = this.props.tbl.cardCombinations.filter(elem => elem.code === (result[0][0].typeOfCombination));\n                alert(`The winning combination is ${_.get(comb[0], 'title')}. Winner(s) are player(s): ${winnerIds.map(elem => elem+1)}`);\n                winnerCards = result.map(elem => elem[0].slice(0, elem[0].typeOfCombination));\n            }\n            \n            console.log(winnerCards);\n\n            this.props.resetWinners();\n            this.props.resetRound();\n        } \n\n        return (\n            <div>\n                <div className='window-class'>\n                    <div className='Table-Wrapper'>\n                        <strong><div className='center'>{`Sum: ${this.props.plr.tablePot}`}</div></strong>\n                        \n                        <div className='Table'>\n                            <Players />\n                            <Board />\n                        </div>\n                    </div>\n                </div> \n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        tbl: state.table,\n        plr: state.players,\n        brd: state.board\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        openAllBoardCards   : (openAll)                   => dispatch({type: actionTypes.OPEN_CARDS,               payload: openAll}),\n        resetOpenCardsFlags : ()                          => dispatch({type: actionTypes.RESET_OPEN_CARDS_FLAGS}),\n        areAllBoardCardsOpen: ()                          => dispatch({type: actionTypes.ALL_BOARD_CARDS_OPEN}),\n        getWinner           : (cardsBySuit, cardsByValue) => dispatch({type: actionTypes.GET_WINNER,               payload: {cardsBySuit: cardsBySuit, cardsByValue: cardsByValue}}),\n        resetWinners        : ()                          => dispatch({type: actionTypes.RESET_WINNERS}),\n        resetRound          : ()                          => dispatch({type: actionTypes.RESET_ROUND}),\n        updatePotsNumber    : ()                          => dispatch({type: actionTypes.UPDATE_POTS_COUNT}),\n        resetPotsNumber     : ()                          => dispatch({type: actionTypes.RESET_POTS_COUNT}),\n        setNoneAsNextPlayer : ()                          => dispatch({type: actionTypes.NONE_NEXT_PLAYER})\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React    from 'react';\nimport Table    from './containers/Table/Table';\n// import logo     from './logo.svg';\n// import BestCard from './components/BestCard/BestCard';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Table />\n    </div>\n    \n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n\n    //     <BestCard />\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actionTypes';\n\nconst initialState = {\n    round: 0,\n    dealerId: -1,\n    cardCombinations: [\n        { code: 1,  title: 'Royal Flush'     },\n        { code: 2,  title: 'Straight Flush'  },\n        { code: 3,  title: 'Four of a Kind'  },\n        { code: 4,  title: 'Full House'      },\n        { code: 5,  title: 'Flush'           },\n        { code: 6,  title: 'Straight'        },\n        { code: 7,  title: 'Three of a Kind' },\n        { code: 8,  title: 'Two Pairs'       },\n        { code: 9,  title: 'Pair'            },\n        { code: 10, title: 'High Card'       }\n    ]\n};\n\nconst tableReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.START_GAME:\n            return {\n                ...state,\n                round: 1\n            }\n\n        case actionTypes.RESET_ROUND:\n            return {\n                ...state,\n                round: 0\n            }\n\n        case actionTypes.SET_DEALER:\n            return {\n                ...state,\n                dealerId: action.payload\n            }\n    }\n\n    return state;\n}\n\nexport default tableReducer;\n\n","import _ from 'lodash';\n\nexport const createCards = () => {\n    let suits     = ['hearts', 'clubs', 'spades', 'diams'];\n    let values    = ['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6', '5', '4', '3', '2'];\n    let tmpSuits  = [...suits];\n    let tmpValues = [...values];\n\n    var res = tmpSuits.reduce((acc, s) =>\n        acc.concat(tmpValues.map(v => ({'suit': s, 'value': v}))), []\n    );\n\n    return res;\n}\n\nexport const updateObjectInArray = (array, obj) => {\n    return array.map((item, index) => {\n        if (index !== obj.index) {\n            return item;\n        }\n    \n        return {\n            ...item,\n            ...obj.item\n        }\n    })\n}\n\nexport const findMaxPot = (arr, property) => {\n    return arr.reduce((max, elem) => {\n        max = (elem[property] > max) ? elem[property] : max;   \n        return max;\n    }, 0);\n}\n\nexport const allHaveSamePot = (arr, property, currentPot) => {\n    return arr.reduce((acc, elem) => {\n        acc += (elem[property] === currentPot) ? 1 : 0;\n        return acc;\n    }, 0);\n}\n\nconst checkIfCardsLeftToToOpen = (arr, property) => {\n    return arr.reduce((acc, elem) => {\n        acc += (elem[property] === false ? 1 : 0);\n        return acc;\n    }, 0);\n}\n\nexport const cardsToOpen = (arr, property, openAllFlag) => {\n    const cardsClosed   = checkIfCardsLeftToToOpen(arr, property);\n    let   howManyToOpen = 0;\n    let   fromIndex     = 0;\n    let   slicedArr     = [];\n    let   retArr        = [];\n\n    if (!openAllFlag) {\n        switch (cardsClosed) {\n            case arr.length:\n                howManyToOpen = 3;\n                fromIndex     = 0;\n                break;\n\n            case 2:\n                howManyToOpen = 1;\n                fromIndex     = 3;  \n                break;\n\n            case 1:\n                howManyToOpen = 1;\n                fromIndex     = 4;\n                break;\n\n            default:\n                howManyToOpen = 0;\n                break;\n        }\n\n        if (howManyToOpen > 0) {\n            slicedArr = arr.slice(fromIndex, fromIndex + howManyToOpen);\n            retArr    = slicedArr.map(e => ({...e, isVisible: true}));\n        \n            if (howManyToOpen === 3) {\n                const [first, second, third] = retArr; \n                arr.splice(fromIndex, howManyToOpen, first, second, third);\n        \n            } else {\n                const [first] = retArr; \n                arr.splice(fromIndex, howManyToOpen, first);\n            }\n        }\n\n    } else {\n        howManyToOpen = arr.length;\n        fromIndex     = 0;\n\n        slicedArr = arr.slice();\n        retArr    = slicedArr.map(e => ({...e, isVisible: true}));\n\n        const [first, second, third, fourth, fifth] = retArr;\n        arr.splice(fromIndex, howManyToOpen, first, second, third, fourth, fifth); \n    }\n\n    return arr;\n}\n\nexport const shouldCheckForWinner = (arr, property) => {\n    return arr.reduce((acc, elem) => {\n        acc += (elem[property] === true) ? 1 : 0;\n        return acc;\n    }, 0);\n}\n\nconst sameCardExistsNtimes = (arr, freq) => {\n    let res = arr.find(e => e[1].freq === freq);\n    return (res) ? res : [];\n}\n\nconst containsStraight = (arr) => {\n    let res       = [];\n    let firstElem = arr[0];\n\n    res.push(firstElem);\n\n    for (let i=0; i<=arr.length-1; i++) { \n        if (res.length < 5) {\n            if (parseInt(firstElem.rank) === parseInt(arr[i].rank) + 1) { \n                res.push(arr[i]); \n              \n                firstElem = arr[i];\n            \n            } else { \n                res       = [];               \n                firstElem = arr[i];\n                res.push(firstElem);\n            } \n        }\n    }\n\n    return res;\n}\n\nconst findCombination = (groupedCardsBySuit, groupedCardsByValue) => { \n    let winCombination    = [];\n    let typeOfCombination = 0;\n\n    // [1, 2] Royal Flush or Straight Flush - OK\n    for (let elem in groupedCardsBySuit) {\n        let cardToCheck = groupedCardsBySuit[elem];\n        let res         = containsStraight(cardToCheck);\n\n        if (res.length === 5) {\n            if (res[0].rank === 14) {\n                typeOfCombination = 1;\n\n            } else {\n                typeOfCombination = 2;\n            }\n\n            winCombination = res;\n            _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n            return winCombination;\n        }\n    }\n\n    // [3] Four of a Kind - OK\n    let fours = [];\n    fours     = sameCardExistsNtimes(groupedCardsByValue, 4); \n\n    if (fours.length > 0) {\n        typeOfCombination = 3;\n        winCombination    = fours[1].slice(0, fours[1].freq);\n        _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n        return winCombination;\n    }\n\n    // [4] Full House - OK\n    let threes = [];\n    threes     = sameCardExistsNtimes(groupedCardsByValue, 3);\n\n    if (threes.length > 0) {\n        let copiedGroupedCardsByValue = _.cloneDeep(groupedCardsByValue);\n\n        let index  = copiedGroupedCardsByValue.indexOf(threes);\n        copiedGroupedCardsByValue.splice(index, 1);\n        let twos = copiedGroupedCardsByValue.find(e => e[1].freq >= 2);\n\n        if (twos) {\n            typeOfCombination = 4;\n            winCombination    = threes[1].slice(0, threes[1].freq).concat(twos[1].slice(0, twos[1].freq));\n            _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n            return winCombination;\n        }\n    };\n    \n    // [5] Flush - OK\n    for (let elem in groupedCardsBySuit) {\n        if (groupedCardsBySuit[elem].length === 5) {\n            typeOfCombination = 5;\n            winCombination    = groupedCardsBySuit[elem];\n            _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n            return winCombination;\n        }\n    }\n\n    // [6] Straight - OK\n    let newGrp = [];\n    for (let elem in groupedCardsByValue) {\n        newGrp.push(groupedCardsByValue[elem][1][0]);\n    }\n\n    let possibleStraight = containsStraight(newGrp);\n    if (possibleStraight.length === 5) {\n        typeOfCombination = 6;\n        winCombination    = possibleStraight;\n        _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n        return winCombination;\n    \n    }\n\n    if (possibleStraight.length === 4) {\n        let twoExists = (possibleStraight.find(el => el.rank === 2)) ? 1 : 0;\n\n        if (twoExists) {\n            let copiedGrpCardsByValue = _.cloneDeep(newGrp);\n        \n            let aceExists = copiedGrpCardsByValue.reduce((acc, elem) => { \n                acc += (elem.rank === 14) ? 1 : 0; \n                return acc; \n            }, 0);\n\n            if (aceExists === 1) {\n                let toCheck = copiedGrpCardsByValue.map(elem => (elem.rank === 14) ? {...elem, rank: 1} : elem);\n\n                toCheck.splice(toCheck.length - 1, 1, toCheck.splice(0, 1)[0]);\n                possibleStraight = containsStraight(toCheck);\n\n                typeOfCombination = 6;\n                winCombination    = possibleStraight;\n                _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n                return winCombination;\n            }\n        }\n    }\n\n    // [7] Three of a Kind - OK\n    let threeOfKind = [];\n    threeOfKind     = sameCardExistsNtimes(groupedCardsByValue, 3);\n\n    if (threeOfKind.length > 0) {\n        typeOfCombination = 7;\n        winCombination    = threeOfKind[1].slice(0, threeOfKind.freq);\n        _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n        return winCombination;\n    }\n\n    // [8] Two Pairs - OK\n    let twos = [];\n    twos     = groupedCardsByValue.filter(e => e[1].freq === 2);\n\n    if (twos.length >= 2) {\n        typeOfCombination = 8;\n        winCombination    = twos[0][1].concat(twos[1][1]);\n        _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n        return winCombination;\n    }\n\n    // [9] Pair - OK\n    if (twos.length === 1) {\n        typeOfCombination = 9;\n        winCombination    = twos[0][1].slice(0, twos[0][1].freq);\n        _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n        return winCombination;\n    } \n\n    // [10] High Card - OK\n    if (winCombination) {\n        typeOfCombination = 10;\n        winCombination    = groupedCardsByValue[0][1].slice(0, groupedCardsByValue[0][1].freq);\n        _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n        return winCombination;\n    }\n}\n\nexport const findWinner = (bySuit, byValues) => {\n    let res = findCombination(bySuit, byValues);\n    let acceptedCombinations = [];\n    acceptedCombinations.push(res);\n\n    return acceptedCombinations;\n}","import * as actionTypes                                    from '../actionTypes';\nimport { updateObjectInArray, findMaxPot, allHaveSamePot } from '../utils';\n\nconst initialState = {\n    canUpdateTablePot: 1,\n    openBoardCards: 0,\n    openAllBoardCards: 0,\n    alreadyOpenedCards: 0,\n    players: [],\n    possibleWinners: [],\n    tablePot: 0,\n    potsCount: 0,\n    howManyPlayersChecked: 0\n};\n\nconst playersReducer = (state = initialState, action) => {\n    let players;\n    let restPlayers;\n    let player;\n    let currentPlayer;\n    let playerId;\n    let canUpdateTablePot;\n    let openBoardCards        = 0;\n    let openAllBoardCards     = 0;\n    let alreadyOpenedCards    = 0;\n    let maxPot                = 0;\n    let activePlayers         = [];\n    let possibleWinners       = [];\n    let tablePot              = 0;\n    let potsCount             = 0;\n    let howManyPlayersChecked = 0;\n\n    switch (action.type) {\n        case actionTypes.UPDATE_POTS_COUNT:\n            players   = [...state.players];\n            potsCount = state.potsCount;\n            potsCount += 1;\n\n            let tmp = players.map(elem => ({...elem, changedPot: 0}));\n\n            return {\n                ...state,\n                players: tmp,\n                potsCount: potsCount\n            }\n\n        case actionTypes.RESET_POTS_COUNT:\n            potsCount = state.potsCount;\n            potsCount = 0;\n\n            return {\n                ...state,\n                potsCount: potsCount\n            }\n\n        case actionTypes.RESET_PLAYERS:\n            players = [];\n            \n            return {\n                ...state,\n                players: players\n            }\n    \n        case actionTypes.STORE_PLAYERS_CARDS:\n            players = action.payload;\n\n            const smallBlindPlayer = players.find(pl => pl.isSmallBlind);\n            smallBlindPlayer.pot   = actionTypes.SMALL_BLIND_AMOUNT;\n\n            const bigBlindPlayer = players.find(pl => pl.isBigBlind);\n            bigBlindPlayer.pot   = actionTypes.SMALL_BLIND_AMOUNT * 2;\n\n            updateObjectInArray(players, smallBlindPlayer);\n            updateObjectInArray(players, bigBlindPlayer);\n\n            return {\n                ...state,\n                players: state.players.concat(players)\n            }\n\n        case actionTypes.INCREMENT_PLAYER_POT:\n            players = [...state.players];\n            player  = players.find(pl => pl.seq === action.payload);\n\n            if (player.cash > 0 && player.pot >= player.potNotLessThan && player.pot + 1 <= player.maxPot + player.previousPot) {\n                player.pot       += 1; \n                player.cash      -= 1;\n                player.changedPot = 1;\n            }\n\n            if (player.cash > 0 && player.pot <= player.potNotLessThan) {\n                if (player.cash >= player.potNotLessThan) {\n                    player.pot  = player.potNotLessThan;\n                    player.cash = player.cash - (player.potNotLessThan - player.previousPot);\n\n                } else {\n                    if (Math.abs(player.potNotLessThan - player.pot) <= player.cash) {\n                        player.pot   = player.potNotLessThan;\n                        player.cash -= Math.abs(player.potNotLessThan - player.previousPot); \n                    \n                    } else {\n                        player.pot  = player.pot + player.cash;\n                        player.cash = 0;\n                    }\n                }\n            }\n\n            player.changedPot = 1;\n\n            if (player.changedPot === 1) {\n                canUpdateTablePot = state.canUpdateTablePot; \n                canUpdateTablePot = 1; \n            }\n\n            updateObjectInArray(players, player);\n\n            return {\n                ...state,\n                players: players,\n                canUpdateTablePot: canUpdateTablePot\n            }\n\n        case actionTypes.DECREMENT_PLAYER_POT:\n            players           = [...state.players];\n            player            = players.find(pl => pl.seq === action.payload);\n            canUpdateTablePot = state.canUpdateTablePot;\n\n            if (player.pot - 1 >= player.potNotLessThan) {\n                if (player.pot-1 !== player.previousPot) {\n                    player.pot  -= 1; \n                    player.cash += 1;\n    \n                    updateObjectInArray(players, player);\n                    \n                    canUpdateTablePot = 1; \n                }\n\n            } else {\n                canUpdateTablePot = 0; \n            }\n\n            return {\n                ...state,\n                players: players,\n                canUpdateTablePot: canUpdateTablePot\n            }\n\n        case actionTypes.EXIT_GAME:\n            players                   = [...state.players];\n            possibleWinners           = [...state.possibleWinners];\n            currentPlayer             = players.find(pl => pl.seq === action.payload);\n            currentPlayer.nextPlayer  = 0;\n            currentPlayer.isActive    = 0;\n            restPlayers               = players.filter(elem => elem.isActive && elem.cash > 0);\n            alreadyOpenedCards        = state.alreadyOpenedCards;\n            openBoardCards            = state.openBoardCards;\n            openAllBoardCards         = state.openAllBoardCards;\n            currentPlayer.previousPot = currentPlayer.previousPot;\n            currentPlayer.maxPot      = currentPlayer.maxPot;\n            howManyPlayersChecked     = state.howManyPlayersChecked;\n\n            if (restPlayers.length >= 2) {\n                let hasAnyonePot = restPlayers.reduce((acc, elem) => { acc += (elem.changedPot === 0) ? 0 : 1; return acc; }, 0);\n        \n                if (hasAnyonePot === 0) {\n                    if (howManyPlayersChecked === restPlayers.length) {\n                        openBoardCards        = 1;\n                        howManyPlayersChecked = 0;\n                    }\n    \n                    playerId          = restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) !== -1 ? restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) : 0;\n                    player            = restPlayers[playerId];\n                    player.nextPlayer = 1;\n                    player.changedPot = 0;\n                \n                } else {\n                    playerId          = restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) !== -1 ? restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) : 0;\n                    player            = restPlayers[playerId];\n                    player.nextPlayer = 1;\n                    player.changedPot = 0;\n                    \n                    updateObjectInArray(players, player);\n\n                    activePlayers = players.filter(elem => elem.isActive);\n                    maxPot        = findMaxPot(activePlayers, 'pot');\n\n                    if (allHaveSamePot(restPlayers, 'pot', maxPot) === restPlayers.length && !alreadyOpenedCards) {\n                        openBoardCards     = 1;\n                        alreadyOpenedCards = 1;\n                    }\n                }\n            } \n\n            if (restPlayers.length <= 1) {\n                possibleWinners   = players.filter(elem => elem.isActive);\n                openAllBoardCards = 1;\n            }\n\n            return {\n                ...state,\n                players: players,\n                openBoardCards: openBoardCards,\n                openAllBoardCards: openAllBoardCards,\n                alreadyOpenedCards: alreadyOpenedCards,\n                possibleWinners: possibleWinners,\n                howManyPlayersChecked: howManyPlayersChecked\n            }\n\n        case actionTypes.UPDATE_ALL_PLAYERS_CURRENT_POT:\n            players       = [...state.players];\n            activePlayers = players.filter(elem => elem.isActive && elem.cash >= 0);\n\n            if (state.canUpdateTablePot === 1) {   \n                const currentPot = findMaxPot(activePlayers, 'pot');\n\n                players.map(pl => {\n                    return pl.potNotLessThan = currentPot;\n                });    \n            }\n\n            return {\n                ...state,\n                players: players\n            }\n\n        case actionTypes.RESET_TABLE_POT:\n            tablePot = 0;\n\n            return {\n                ...state,\n                tablePot: tablePot\n            }\n\n        case actionTypes.SET_TABLE_POT:\n            players       = [...state.players];\n            activePlayers = players.filter(elem => elem.isActive && elem.cash >= 0);\n            tablePot      = activePlayers.reduce((acc, elem) => { acc += elem.pot; return acc; }, 0);\n\n            return {\n                ...state,\n                tablePot: tablePot\n            }\n\n        case actionTypes.SET_NEXT_PLAYER:\n            players                   = [...state.players];\n            possibleWinners           = [...state.possibleWinners];\n            currentPlayer             = players.find(pl => pl.seq === action.payload);\n            restPlayers               = players.filter(elem => elem.isActive && elem.cash > 0);\n            openBoardCards            = state.openBoardCards;\n            openAllBoardCards         = state.openAllBoardCards;\n            alreadyOpenedCards        = state.alreadyOpenedCards;\n            alreadyOpenedCards        = 0;\n            currentPlayer.previousPot = currentPlayer.pot;\n            currentPlayer.maxPot      = currentPlayer.cash;\n            canUpdateTablePot         = state.canUpdateTablePot;\n            potsCount                 = state.potsCount;\n            howManyPlayersChecked     = state.howManyPlayersChecked;\n\n            if ((currentPlayer.pot >= currentPlayer.potNotLessThan || currentPlayer.cash === 0) && currentPlayer.changedPot === 1) { \n                howManyPlayersChecked = 0;\n\n                if (restPlayers.length >= 2) {\n                    playerId                 = restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) !== -1 ? restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) : 0;\n                    player                   = restPlayers[playerId];\n                    player.nextPlayer        = 1;\n                    currentPlayer.nextPlayer = 0;\n                    currentPlayer.changedPot = 1;\n\n                    updateObjectInArray(players, player);\n                    activePlayers = players.filter(elem => elem.isActive);\n                    maxPot        = findMaxPot(activePlayers, 'pot');\n\n                    if (allHaveSamePot(restPlayers, 'pot', maxPot) === restPlayers.length && !alreadyOpenedCards) {\n                        openBoardCards     = 1;\n                        alreadyOpenedCards = 1;\n                    }\n                } \n                \n                if (restPlayers.length === 0) {\n                    alert('next - vres nikiti');\n                    currentPlayer.nextPlayer = 0;\n                    possibleWinners          = players.filter(elem => elem.isActive);\n                    openAllBoardCards        = 1;\n                } \n\n                if (restPlayers.length === 1 && currentPlayer.cash >= 0) {\n                    if (restPlayers[0].changedPot === 0) {\n                        currentPlayer.nextPlayer  = 0;\n                        restPlayers[0].nextPlayer = 1;\n                        restPlayers[0].changedPot = 1;\n                    \n                    } else {\n                        currentPlayer.nextPlayer = 0;\n                        alert('next - vres nikiti');\n                        possibleWinners   = players.filter(elem => elem.isActive);\n                        openAllBoardCards = 1;\n                    }\n                } \n                \n                possibleWinners   = players.filter(elem => elem.isActive);\n                canUpdateTablePot = 1;\n\n            \n            } else {\n                let hasAnyonePot = restPlayers.reduce((acc, elem) => { acc += (elem.changedPot === 0) ? 0 : 1; return acc; }, 0);\n                \n                if (hasAnyonePot === 0) {\n                    howManyPlayersChecked += 1;\n\n                    if (howManyPlayersChecked === restPlayers.length) {\n                        openBoardCards        = 1;\n                        howManyPlayersChecked = 0;\n                    }\n\n                    playerId                 = restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) !== -1 ? restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) : 0;\n                    player                   = restPlayers[playerId];\n                    player.nextPlayer        = 1;\n                    currentPlayer.nextPlayer = 0;\n                    currentPlayer.changedPot = 0;\n                }\n            }\n\n            return {\n                ...state,\n                players: players,\n                openBoardCards: openBoardCards,\n                openAllBoardCards: openAllBoardCards,\n                alreadyOpenedCards: alreadyOpenedCards,\n                canUpdateTablePot: canUpdateTablePot,\n                possibleWinners: possibleWinners,\n                howManyPlayersChecked: howManyPlayersChecked\n            }\n\n        case actionTypes.RESET_OPEN_CARDS_FLAGS:\n            return {\n                ...state,\n                openBoardCards: 0,\n                openAllBoardCards: 0\n            }\n\n        case actionTypes.NONE_NEXT_PLAYER:\n            let tmpPlayers = [...state.players];\n            players        = tmpPlayers.map(elem => ({...elem, nextPlayer: 0}));\n\n            return {\n                ...state,\n                players: players\n            }\n    }\n    \n    return state;\n}\n\nexport default playersReducer;\n\n","import * as actionTypes                                               from '../actionTypes';\nimport { createCards, cardsToOpen, shouldCheckForWinner, findWinner } from '../utils';\nimport _                                                              from 'lodash';\n\nconst initialState = {\n    initCards: createCards(),\n    numOfPlayers: actionTypes.NUM_OF_PLAYERS,\n    firstPlayerId: null,\n    checkForWinner: 0,\n    winCombinations: [],\n    cards: []\n};\n\nconst boardReducer = (state = initialState, action) => {\n    let cards           = [];\n    let updatedCards    = [];\n    let checkForWinner  = 0;\n    let winCombinations = [];\n\n    switch (action.type) {\n        case actionTypes.RESET_WINNERS:\n            winCombinations = [];\n            checkForWinner  = 0;\n            \n            return {\n                ...state,\n                winCombinations: winCombinations,\n                checkForWinner: checkForWinner\n            }\n\n        case actionTypes.RESET_BOARD_CARDS:\n            cards = [];\n            \n            return {\n                ...state,\n                cards: cards,\n            }\n\n        case actionTypes.STORE_BOARD_CARDS:\n            return {\n                ...state,\n                cards: state.cards.concat(action.payload)\n            }\n\n        case actionTypes.SET_FIRST_PLAYER:\n            return {\n                ...state,\n                firstPlayerId: action.payload\n            }\n\n        case actionTypes.RESET_FIRST_PLAYER:\n            return {\n                ...state,\n                firstPlayerId: null\n            }\n\n        case actionTypes.OPEN_CARDS:\n            cards        = [...state.cards];\n            updatedCards = cardsToOpen(cards, 'isVisible', action.payload);\n            \n            return {\n                ...state,\n                cards: updatedCards\n            }\n\n        case actionTypes.ALL_BOARD_CARDS_OPEN:\n            cards          = [...state.cards];\n            checkForWinner = shouldCheckForWinner(cards, 'isVisible') === cards.length;\n\n            return {\n                ...state,\n                checkForWinner: checkForWinner\n            }\n\n        case actionTypes.GET_WINNER:\n            winCombinations = [...state.winCombinations];\n            checkForWinner  = 0;\n\n            let a = findWinner(action.payload.cardsBySuit, action.payload.cardsByValue);\n            winCombinations.push(a);\n              \n            return {\n                ...state,\n                checkForWinner: checkForWinner,\n                winCombinations: winCombinations\n            }\n    }\n    \n    return state;\n}\n\nexport default boardReducer;\n\n","import React                            from 'react';\nimport ReactDOM                         from 'react-dom';\nimport App                              from './App';\nimport * as serviceWorker               from './serviceWorker';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider }                     from 'react-redux';\nimport tableReducer                     from './store/reducers/tableReducer';\nimport playersReducer                   from './store/reducers/playersReducer';\nimport boardReducer                     from './store/reducers/boardReducer';\n\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \nimport './index.css';\n\nconst rootReducer = combineReducers({\n    table  : tableReducer,\n    board  : boardReducer, \n    players: playersReducer\n});\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}