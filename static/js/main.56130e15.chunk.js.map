{"version":3,"sources":["components/Card/Card.js","containers/Table/components/Board/Board.js","store/actionTypes.js","containers/Table/components/Players/components/Player/Player.js","containers/Table/components/Players/Players.js","containers/Table/Table.js","App.js","serviceWorker.js","store/utils.js","store/reducers/tableReducer.js","index.js"],"names":["Card","props","cardClass","push","value","toLowerCase","suit","cardUnicode","openedCards","tmp","split","selected","react_default","a","createElement","className","concat","String","fromCharCode","length","join","Board","shuffleCards","arr","i","rnd","Math","random","getRank","obj","property","parseInt","boardCards","_this2","this","allCards","cards","player","firstPlayerId","j","dealerId","_","cloneDeep","tbl","initCards","map","elem","rank","isVisible","_loop","smallBlindId","bigBlindId","nextPlayerId","cash","floor","actionTypes","slice","Object","objectSpread","belongsTo","seq","isActive","nextPlayer","pot","potNotLessThan","maxPot","changedPot","smallBlindAmount","isDealer","isSmallBlind","isBigBlind","previousPot","card","index","key","components_Card_Card","onClick","round","resetBoardCards","resetPlayers","setDealer","storeBoardCards","startGame","updatePotsNumber","storePlayersCards","setFirstPlayer","updateCurrentPot","resetTablePot","setTablePot","Component","connect","state","table","dispatch","type","payload","playersCards","resetWinners","Player","playerId","classes","nextPlayerBtns","incrementPot","style","margin","decrementPot","resetFirstPlayer","exitGame","setNextPlayer","id","Players","_this","players","components_Player_Player","Table","openBoardCards","openAllBoardCards","potsCount","areAllBoardCardsOpen","resetOpenCardsFlags","resetPotsNumber","setNoneAsNextPlayer","tablePot","components_Players_Players","components_Board_Board","openAll","getWinner","cardsBySuit","cardsByValue","resetRound","App","containers_Table_Table","Boolean","window","location","hostname","match","groupByProperty","ourArray","reduce","accumulator","object","sortArray","sort","b","updateObjectInArray","array","item","findMaxPot","max","checkIfAll","acc","sameCardExistsNtimes","freq","res","find","e","containsStraight","firstElem","findWinner","bySuit","byValues","groupedCardsBySuit","groupedCardsByValue","winCombination","typeOfCombination","cardToCheck","set","fours","threes","copiedGroupedCardsByValue","indexOf","splice","twos","newGrp","possibleStraight","el","copiedGrpCardsByValue","toCheck","threeOfKind","filter","findCombination","acceptedCombinations","initialState","cardCombinations","code","title","tmpSuits","tmpValues","s","v","createCards","numOfPlayers","checkForWinner","winCombinations","canUpdateTablePot","alreadyOpenedCards","possibleWinners","howManyPlayersChecked","tableReducer","_objectSpread2","restPlayers","currentPlayer","arguments","undefined","action","updatedCards","activePlayers","openAllFlag","cardsClosed","howManyToOpen","fromIndex","retArr","_retArr5","_retArr6","slicedToArray","first","second","third","fourth","fifth","_retArr","_retArr2","_retArr3","cardsToOpen","toConsumableArray","updatedBoardCards","result","groupedArr","entries","sortedGroupedArr","includes","printWinners","isBoard","cardsToFormat","grpCardsBySuit","tmpGroupedCardsByValue","grpCardsByValue","winCombs","formatCards","bestCards","orderBy","bestCombNum","comb","winnerIds","alert","get","updatedWinnerCards","pl","defineProperty","smallBlindPlayer","bigBlindPlayer","abs","findIndex","currentPot","tmpPlayers","rootReducer","combineReducers","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56130e15.chunk.js","sourcesContent":["import React       from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n    let cardClass = ['card'];\n\n    cardClass.push('rank-' + props.value.toLowerCase());\n    cardClass.push(props.suit);\n\n    let cardUnicode = (props.suit === 'spades') ? 'U+2660' : \n                      (props.suit === 'clubs')  ? 'U+2663' : \n                      (props.suit === 'hearts') ? 'U+2665' : 'U+2666';\n\n    if (!props.openedCards) {\n        return (\n            <div className='card back'>*</div>\n        );\n\n    } else {\n        let tmp = cardUnicode.split('+');\n\n        if (!props.selected) {\n            return (\n                <div className={cardClass.join(' ')}>\n                    <span className='rank'>{props.value}</span>\n                    <span className='suit'>{String.fromCharCode(`0x${tmp[tmp.length-1]}`)}</span>\n                </div>\n            );\n        \n        } else {\n            return (\n                <strong>\n                    <span className={`card rank-${props.value.toLowerCase()} ${props.suit}`}>    \n                        <span className='rank'>{props.value}</span>\n                        <span className='suit'>{String.fromCharCode(`0x${tmp[tmp.length-1]}`)}</span>\n                    </span>\n                </strong>\n            );\n        } \n    }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport { connect }          from 'react-redux';\nimport Card                 from 'card';\nimport _                    from 'lodash';\nimport * as actionTypes     from '../../../../store/actionTypes';\n\nimport './Board.css';\n\nclass Board extends Component {\n    shuffleCards = arr => {\n        for (let i = 0; i < arr.length; i++) {\n          const rnd = Math.random() * i | 0;\n          const tmp = arr[i];\n          arr[i]    = arr[rnd];\n          arr[rnd]  = tmp;\n        }\n        return arr;\n    };\n\n    getRank = (obj, property) => {\n        let rank = 0;\n        \n        if (obj[property] === 'J') {\n            rank = 11;  \n        } else if (obj[property] === 'Q') {\n            rank = 12;  \n        } else if (obj[property] === 'K') {\n            rank = 13;  \n        } else if (obj[property] === 'A') {\n            rank = 14;  \n        } else {\n            rank = parseInt(obj[property]);\n        }\n        \n        return rank;\n    };\n\n    render() { \n        const allCards  = <div className='card back'>*</div>;\n        \n        let cards         = [];\n        let player        = [];\n        let boardCards    = [];\n        let firstPlayerId = null;\n        let j             = 0;\n        let dealerId      = -1;\n\n        cards = _.cloneDeep(this.props.tbl.initCards);\n        cards.map(elem => elem.rank = this.getRank(elem, 'value'));\n        cards.map(elem => elem.isVisible = false);\n        this.shuffleCards(cards);\n\n        for (let i=0; i<actionTypes.NUM_OF_PLAYERS; i++) {\n            dealerId          = (this.props.tbl.dealerId + 1 >= actionTypes.NUM_OF_PLAYERS) \n                              ?  this.props.tbl.dealerId + 1 - actionTypes.NUM_OF_PLAYERS \n                              :  this.props.tbl.dealerId + 1\n\n            let smallBlindId  = (dealerId + 1 >= actionTypes.NUM_OF_PLAYERS) \n                              ?  dealerId + 1 - actionTypes.NUM_OF_PLAYERS     \n                              :  dealerId + 1;\n\n            let bigBlindId    = (dealerId + 2 >= actionTypes.NUM_OF_PLAYERS) \n                              ?  dealerId + 2 - actionTypes.NUM_OF_PLAYERS \n                              :  dealerId + 2;\n\n            firstPlayerId     = (bigBlindId + 1 >= actionTypes.NUM_OF_PLAYERS)\n                              ?  bigBlindId + 1 - actionTypes.NUM_OF_PLAYERS \n                              :  bigBlindId + 1;\n\n            let nextPlayerId  = (bigBlindId + 1 >= actionTypes.NUM_OF_PLAYERS) \n                              ?  bigBlindId + 1 - actionTypes.NUM_OF_PLAYERS\n                              :  bigBlindId + 1\n\n            let cash = Math.floor(Math.random() * (20 - actionTypes.SMALL_BLIND_AMOUNT*2)) + (actionTypes.SMALL_BLIND_AMOUNT*2);                    \n\n            player.push({\n                cards           : cards.slice(i+j, i+j+2).map(elem => ({...elem, belongsTo: i, selected: false})),\n                seq             : i,\n                cash            : (smallBlindId === i) ? cash - actionTypes.SMALL_BLIND_AMOUNT : \n                                    (bigBlindId === i) ? cash - actionTypes.SMALL_BLIND_AMOUNT*2 : cash,\n                isActive        : 1,\n                nextPlayer      : (i === nextPlayerId) ? 1 : 0,\n                pot             : 0,\n                potNotLessThan  : 0,\n                maxPot          : cash,\n                changedPot      : 0,\n                smallBlindAmount: actionTypes.SMALL_BLIND_AMOUNT,\n                isDealer        : dealerId === i,\n                isSmallBlind    : smallBlindId === i,\n                isBigBlind      : bigBlindId === i,\n                previousPot     : (smallBlindId === i) ? actionTypes.SMALL_BLIND_AMOUNT : \n                                    (bigBlindId === i) ? actionTypes.SMALL_BLIND_AMOUNT*2 : 0\n            });\n            j += 1;\n        }\n\n        boardCards = cards.slice(j*2, (j*2)+5);\n\n        return (\n            <div className='Board'> \n                {\n                    this.props.tbl.cards.map((card, index) => {\n                        return (\n                            <div className='playingCards' key={index}>\n                                {   \n                                    (!card.isVisible)\n                                    ? <div className='card back'>*</div>\n                                    : <Card value={card.value} suit={card.suit} openedCards={1} selected={card.selected} />\n                                }\n                            </div>\n                        );\n                    })\n                }\n\n                <div className='playingCards all-cards' \n                    onClick={() => this.props.tbl.round === 0 ? (this.props.resetBoardCards(),\n                                                                 this.props.resetPlayers(),\n                                                                 this.props.setDealer(dealerId),\n                                                                 this.props.storeBoardCards(boardCards), \n                                                                 this.props.startGame(), \n                                                                 this.props.updatePotsNumber(),\n                                                                 this.props.storePlayersCards(player),\n                                                                 this.props.setFirstPlayer(firstPlayerId),\n                                                                 this.props.updateCurrentPot(),\n                                                                 this.props.resetTablePot(),\n                                                                 this.props.setTablePot()) : null}>\n                    {allCards}\n                    <div className='clear'></div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        tbl: state.table\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setDealer        : (dealerId)      => dispatch({type: actionTypes.SET_DEALER,                       payload: dealerId}),\n        storeBoardCards  : (boardCards)    => dispatch({type: actionTypes.STORE_BOARD_CARDS,                payload: boardCards}),\n        startGame        : ()              => dispatch({type: actionTypes.START_GAME}),\n        updatePotsNumber : ()              => dispatch({type: actionTypes.UPDATE_POTS_COUNT}),\n        storePlayersCards: (playersCards)  => dispatch({type: actionTypes.STORE_PLAYERS_CARDS,              payload: playersCards}),\n        setFirstPlayer   : (firstPlayerId) => dispatch({type: actionTypes.SET_FIRST_PLAYER,                 payload: firstPlayerId}),\n        updateCurrentPot : ()              => dispatch({type: actionTypes.UPDATE_ALL_PLAYERS_CURRENT_POT}),\n        resetTablePot    : ()              => dispatch({type: actionTypes.RESET_TABLE_POT}),\n        setTablePot      : ()              => dispatch({type: actionTypes.SET_TABLE_POT}),\n        resetBoardCards  : ()              => dispatch({type: actionTypes.RESET_BOARD_CARDS}),\n        resetPlayers     : ()              => dispatch({type: actionTypes.RESET_PLAYERS}),\n        resetWinners     : ()              => dispatch({type: actionTypes.RESET_WINNERS}),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","export const DEALER_ID                      = 0;\nexport const NUM_OF_PLAYERS                 = 4;\nexport const SMALL_BLIND_AMOUNT             = 2;\nexport const SET_FIRST_PLAYER               = 'SET_FIRST_PLAYER';\n\nexport const STORE_PLAYERS_CARDS            = 'STORE_PLAYERS_CARDS';\nexport const STORE_BOARD_CARDS              = 'STORE_BOARD_CARDS';\nexport const INCREMENT_PLAYER_POT           = 'INCREMENT_PLAYER_POT';\nexport const DECREMENT_PLAYER_POT           = 'DECREMENT_PLAYER_POT';\nexport const UPDATE_PLAYER_POT              = 'UPDATE_PLAYER_POT';\nexport const UPDATE_ALL_PLAYERS_CURRENT_POT = 'UPDATE_ALL_PLAYERS_CURRENT_POT';\nexport const DEAL_CARDS                     = 'DEAL_CARDS';\nexport const SET_NEXT_PLAYER                = 'SET_NEXT_PLAYER';\nexport const RESET_FIRST_PLAYER             = 'RESET_FIRST_PLAYER';\nexport const EXIT_GAME                      = 'EXIT_GAME';\nexport const OPEN_CARDS                     = 'OPEN_CARDS';\nexport const RESET_OPEN_CARDS_FLAGS         = 'RESET_OPEN_CARDS_FLAGS';\nexport const ALL_BOARD_CARDS_OPEN           = 'ALL_BOARD_CARDS_OPEN';\nexport const GET_WINNER                     = 'GET_WINNER';\nexport const RESET_ROUND                    = 'RESET_ROUND';\nexport const RESET_PLAYERS                  = 'RESET_PLAYERS';\nexport const START_GAME                     = 'START_GAME';\nexport const RESET_WINNERS                  = 'RESET_WINNERS';\nexport const RESET_BOARD_CARDS              = 'RESET_BOARD_CARDS';\nexport const SET_DEALER                     = 'SET_DEALER';\nexport const SET_TABLE_POT                  = 'SET_TABLE_POT';\nexport const RESET_TABLE_POT                = 'RESET_TABLE_POT';\nexport const UPDATE_POTS_COUNT              = 'UPDATE_POTS_COUNT'; \nexport const OPEN_BOARD_CARDS               = 'OPEN_BOARD_CARDS';\nexport const RESET_POTS_COUNT               = 'RESET_POTS_COUNT';\nexport const NONE_NEXT_PLAYER               = 'NONE_NEXT_PLAYER';\n","import React from 'react';\nimport Card  from 'card';\n\nimport './Player.css';\n\nconst Player = props => {\n    const playerId = props.player.seq + 1;\n    let classes    = [];\n    classes.push((props.player.isActive === 0) ? 'inactive-player' : null);\n\n    let nextPlayerBtns = null;\n\n    if (props.nextPlayer === props.player.seq) {\n        nextPlayerBtns = (\n            <div className='pot-btns'>\n                <button className='update-pot-btn' onClick={() => props.incrementPot(props.player.seq)}>+</button> \n\n                <div style={{margin: '18px'}}>{props.player.pot}</div>\n\n                <button className='update-pot-btn' onClick={() => props.decrementPot(props.player.seq)}>-</button>\n                \n                <button className='exit-btn' onClick={() => {props.resetFirstPlayer(); props.exitGame(props.player.seq)}}>\n                    <i className='fa fa-close'></i>\n                </button> \n\n                <button className='next-btn' onClick={() => {props.resetFirstPlayer(); \n                                                             props.setNextPlayer(props.player.seq);\n                                                             props.updateCurrentPot(); \n                                                             props.setTablePot();\n                                                            }}>                                                         \n                    <strong>{`Next`}</strong>\n                </button> \n            </div>\n        );\n    }\n    \n    return ( \n        <div id={'player-' + playerId} className='player-info'>              \n            <div className='center-player-info pl-info'> \n                <div className={classes.join(' ')}>\n                    {`Cash: €${props.player.cash} - Pot: €${props.player.pot}`}\n                </div>\n            </div>\n\n            <div className='center-player-info center-player-btns'> \n                {nextPlayerBtns}\n            </div>\n\n            <div className='center-player-info-cards'>\n                {\n                    props.player.cards.map((card, index) => {\n                        return (\n                            <div key={index}>\n                                <div className='playingCards'>\n                                    <Card value={card.value} suit={card.suit} openedCards={props.player.nextPlayer === 1 || card.selected} selected={card.selected} />\n                                </div>\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default Player;\n","import React, { Component } from 'react';\nimport { connect }          from 'react-redux'; \nimport Player               from 'player';\nimport * as actionTypes     from '../../../../store/actionTypes';\n\nimport './Players.css';\n\nclass Players extends Component {\n    render() { \n        return (\n            <div> \n                {\n                    this.props.tbl.players.map((player, index) => {\n                        return (\n                            <div key={index}>\n                                <Player player={player} \n                                        nextPlayer      ={(this.props.tbl.firstPlayerId !== null) \n                                                        ? this.props.tbl.firstPlayerId \n                                                        : ( (player.nextPlayer === 1) ? player.seq : null )}\n                                        incrementPot    ={(playerId) => this.props.incrementPot(playerId)} \n                                        decrementPot    ={(playerId) => this.props.decrementPot(playerId)} \n                                        exitGame        ={(playerId) => this.props.exitGame(playerId)} \n                                        setNextPlayer   ={(playerId) => this.props.setNextPlayer(playerId)}\n                                        updateCurrentPot={()         => this.props.updateCurrentPot()}\n                                        setTablePot     ={()         => this.props.setTablePot()}\n                                        resetFirstPlayer={()         => this.props.resetFirstPlayer()}\n                                        selected        ={this.props.selected} \n                                />\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        tbl: state.table\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        incrementPot    : (playerId) => dispatch({type: actionTypes.INCREMENT_PLAYER_POT, payload:    playerId}),\n        decrementPot    : (playerId) => dispatch({type: actionTypes.DECREMENT_PLAYER_POT, payload:    playerId}),\n        exitGame        : (playerId) => dispatch({type: actionTypes.EXIT_GAME,                        payload: playerId}),\n        updateCurrentPot: ()         => dispatch({type: actionTypes.UPDATE_ALL_PLAYERS_CURRENT_POT}),\n        setTablePot     : ()         => dispatch({type: actionTypes.SET_TABLE_POT}),\n        setNextPlayer   : (playerId) => dispatch({type: actionTypes.SET_NEXT_PLAYER,                  payload: playerId}),\n        resetFirstPlayer: ()         => dispatch({type: actionTypes.RESET_FIRST_PLAYER})\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Players);\n","import React, { Component } from 'react';\nimport { connect }          from 'react-redux'; \nimport _                    from 'lodash';\nimport Board                from 'board';\nimport Players              from 'players';\nimport * as actionTypes     from '../../store/actionTypes';\n  \nimport './Table.css';\n\nclass Table extends Component {\n    render() {\n        if (this.props.tbl.openBoardCards) {\n            // console.log('open next card');\n            this.props.updatePotsNumber();\n            this.props.openAllBoardCards(0);\n            \n            if (this.props.tbl.potsCount >= 5) {\n                this.props.areAllBoardCardsOpen();\n            }\n\n            this.props.resetOpenCardsFlags();\n        }\n\n        if (this.props.tbl.openAllBoardCards) {\n            // console.log('open all cards');\n            this.props.updatePotsNumber();\n            this.props.openAllBoardCards(1);\n            this.props.areAllBoardCardsOpen();\n            this.props.resetOpenCardsFlags();\n        }\n\n        if (this.props.tbl.potsCount >= 5) {\n            // console.log('check for winner no matter what');\n            this.props.resetPotsNumber();\n            this.props.openAllBoardCards(1);\n            this.props.areAllBoardCardsOpen();\n            this.props.resetOpenCardsFlags();\n            this.props.setNoneAsNextPlayer();\n        }\n\n        return (\n            <div>\n                <div className='window-class'>\n                    <div className='table-wrapper'>\n                        {\n                            this.props.tbl.players.map((player, index) => {\n                                return (\n                                    <div key={index}>\n                                        <div id={`seat-${player.seq + 1}`} className='seat'>\n                                            <strong>\n                                                <div className='seat-lbl'>\n                                                    {\n                                                        player.isDealer \n                                                        ? `Player ${player.seq + 1} (Dealer)`\n                                                            : player.isSmallBlind \n                                                                ? `Player ${player.seq + 1} (Small Blind)` \n                                                                : player.isBigBlind ? `Player ${player.seq + 1} (Big Blind)` \n                                                        : `Player ${player.seq + 1}`\n                                                    }\n                                                </div>\n                                            </strong>\n                                        </div>\n                                    </div>\n                                );\n                            })\n                        }\n\n                        <strong><div className='center'>{`Sum: ${this.props.tbl.tablePot}`}</div></strong>\n                        \n                        <div className='Table'>\n                            <Players />\n                            <Board />\n                        </div>\n                    </div>\n                </div> \n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        tbl: state.table\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        openAllBoardCards   : (openAll)                   => dispatch({type: actionTypes.OPEN_CARDS,               payload: openAll}),\n        resetOpenCardsFlags : ()                          => dispatch({type: actionTypes.RESET_OPEN_CARDS_FLAGS}),\n        areAllBoardCardsOpen: ()                          => dispatch({type: actionTypes.ALL_BOARD_CARDS_OPEN}),\n        getWinner           : (cardsBySuit, cardsByValue) => dispatch({type: actionTypes.GET_WINNER,               payload: {cardsBySuit: cardsBySuit, cardsByValue: cardsByValue}}),\n        resetWinners        : ()                          => dispatch({type: actionTypes.RESET_WINNERS}),\n        resetRound          : ()                          => dispatch({type: actionTypes.RESET_ROUND}),\n        updatePotsNumber    : ()                          => dispatch({type: actionTypes.UPDATE_POTS_COUNT}),\n        resetPotsNumber     : ()                          => dispatch({type: actionTypes.RESET_POTS_COUNT}),\n        setNoneAsNextPlayer : ()                          => dispatch({type: actionTypes.NONE_NEXT_PLAYER})\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React    from 'react';\nimport Table    from './containers/Table/Table';\n// import logo     from './logo.svg';\n// import BestCard from './components/BestCard/BestCard';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Table />\n    </div>\n    \n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n\n    //     <BestCard />\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import _ from 'lodash';\n\nexport const groupByProperty = (ourArray, property) => {\n    return ourArray.reduce(function (accumulator, object) {\n        const key = object[property];\n\n        if (!accumulator[key]) {\n            accumulator[key] = [];\n        }\n\n        accumulator[key].push(object);\n\n        return accumulator;\n    }, {});\n}\n\nexport const sortArray = (arr, property) => {\n    const res = arr.sort((a, b) => a.rank < b.rank ? 1 : -1);\n  \n    return res;\n}\n\nexport const formatCards = (cardsToFormat) => {\n    let cards                  = sortArray(cardsToFormat, 'rank');  \n    let grpCardsBySuit         = groupByProperty(cards, 'suit');\n    let tmpGroupedCardsByValue = groupByProperty(cards, 'rank');\n\n    for (let elem in tmpGroupedCardsByValue) { \n        tmpGroupedCardsByValue[elem].freq = tmpGroupedCardsByValue[elem].length; \n    }\n\n    let grpCardsByValue = Object.entries(tmpGroupedCardsByValue);\n    sortArray(grpCardsByValue, grpCardsByValue[1]);\n\n    let a        = findWinner(grpCardsBySuit, grpCardsByValue);\n    let winCombs = [];\n    winCombs.push(a);\n\n    return winCombs;\n}\n\nexport const printWinners = (arr) => {\n    let grouped = arr.map(elem => {\n        return elem.reduce((acc, el) => {\n            const key = el.typeOfCombination;\n        \n            if (!acc[key]) {\n                acc[key] = [];\n            }\n    \n            acc[key].push(el);\n    \n            return acc;\n        }, {});\n    });\n      \n    let groupedArr = grouped.map(elem => Object.entries(elem));\n    groupedArr.map(elem => elem[0][0] = parseInt(elem[0][0]));\n    \n    let sortedGroupedArr   = groupedArr.reduce((acc, el) => { acc[0] = (acc[0] === undefined || el[0][0] < acc[0]) ? el[0][0] : acc[0]; return acc; }, []);\n    let groupedArrFiltered = groupedArr.filter(elem => elem[0].includes(sortedGroupedArr[0]));\n    let res                = groupedArrFiltered.map(elem => elem[0][1]);\n\n    return res;\n}\n\nexport const getWinnerIds = (arr) => {\n    return arr.map(elem => {\n        return elem.reduce((acc, el) => { \n            acc = (el.belongsTo !== 'board') ? parseInt(el.belongsTo) : 'board';  \n            return acc; \n        }, -1);\n    });\n}     \n\nexport const createCards = () => {\n    let suits     = ['hearts', 'clubs', 'spades', 'diams'];\n    let values    = ['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6', '5', '4', '3', '2'];\n    let tmpSuits  = [...suits];\n    let tmpValues = [...values];\n\n    var res = tmpSuits.reduce((acc, s) =>\n        acc.concat(tmpValues.map(v => ({'suit': s, 'value': v}))), []\n    );\n\n    return res;\n}\n\nexport const updateObjectInArray = (array, obj) => {\n    return array.map((item, index) => {\n        if (index !== obj.index) {\n            return item;\n        }\n    \n        return {\n            ...item,\n            ...obj.item\n        }\n    })\n}\n\nexport const findMaxPot = (arr, property) => {\n    return arr.reduce((max, elem) => {\n        max = (elem[property] > max) ? elem[property] : max;   \n        return max;\n    }, 0);\n}\n\nexport const checkIfAll = (arr, property, value) => {\n    return arr.reduce((acc, elem) => {\n        acc += (elem[property] === value) ? 1 : 0;\n        return acc;\n    }, 0);\n}\n\nexport const cardsToOpen = (arr, property, openAllFlag) => {\n    const cardsClosed   = checkIfAll(arr, property, false);\n    let   howManyToOpen = 0;\n    let   fromIndex     = 0;\n    let   slicedArr     = [];\n    let   retArr        = [];\n\n    if (!openAllFlag) {\n        switch (cardsClosed) {\n            case arr.length:\n                howManyToOpen = 3;\n                fromIndex     = 0;\n                break;\n\n            case 2:\n                howManyToOpen = 1;\n                fromIndex     = 3;  \n                break;\n\n            case 1:\n                howManyToOpen = 1;\n                fromIndex     = 4;\n                break;\n\n            default:\n                howManyToOpen = 0;\n                break;\n        }\n\n        if (howManyToOpen > 0) {\n            slicedArr = arr.slice(fromIndex, fromIndex + howManyToOpen);\n            retArr    = slicedArr.map(e => ({...e, isVisible: true}));\n        \n            if (howManyToOpen === 3) {\n                const [first, second, third] = retArr; \n                arr.splice(fromIndex, howManyToOpen, first, second, third);\n        \n            } else {\n                const [first] = retArr; \n                arr.splice(fromIndex, howManyToOpen, first);\n            }\n        }\n\n    } else {\n        howManyToOpen = arr.length;\n        fromIndex     = 0;\n\n        slicedArr = arr.slice();\n        retArr    = slicedArr.map(e => ({...e, isVisible: true}));\n\n        const [first, second, third, fourth, fifth] = retArr;\n        arr.splice(fromIndex, howManyToOpen, first, second, third, fourth, fifth); \n    }\n\n    return arr;\n}\n\nconst sameCardExistsNtimes = (arr, freq) => {\n    let res = arr.find(e => e[1].freq === freq);\n    return (res) ? res : [];\n}\n\nconst containsStraight = (arr) => {\n    let res       = [];\n    let firstElem = arr[0];\n\n    res.push(firstElem);\n\n    for (let i=0; i<=arr.length-1; i++) { \n        if (res.length < 5) {\n            if (parseInt(firstElem.rank) === parseInt(arr[i].rank) + 1) { \n                res.push(arr[i]); \n                firstElem = arr[i];\n            \n            } else { \n                res       = [];               \n                firstElem = arr[i];\n                res.push(firstElem);\n            } \n        }\n    }\n    return res;\n}\n\nconst findCombination = (groupedCardsBySuit, groupedCardsByValue) => { \n    let winCombination    = [];\n    let typeOfCombination = 0;\n\n    // [1, 2] Royal Flush or Straight Flush - OK\n    for (let elem in groupedCardsBySuit) {\n        let cardToCheck = groupedCardsBySuit[elem];\n        let res         = containsStraight(cardToCheck);\n\n        if (res.length === 5) {\n            if (res[0].rank === 14) {\n                typeOfCombination = 1;\n\n            } else {\n                typeOfCombination = 2;\n            }\n\n            winCombination = res;\n            _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n            return winCombination;\n        }\n    }\n\n    // [3] Four of a Kind - OK\n    let fours = [];\n    fours     = sameCardExistsNtimes(groupedCardsByValue, 4); \n\n    if (fours.length > 0) {\n        typeOfCombination = 3;\n        winCombination    = fours[1].slice(0, fours[1].freq);\n        _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n        return winCombination;\n    }\n\n    // [4] Full House - OK\n    let threes = [];\n    threes     = sameCardExistsNtimes(groupedCardsByValue, 3);\n\n    if (threes.length > 0) {\n        let copiedGroupedCardsByValue = _.cloneDeep(groupedCardsByValue);\n\n        let index  = copiedGroupedCardsByValue.indexOf(threes);\n        copiedGroupedCardsByValue.splice(index, 1);\n        let twos = copiedGroupedCardsByValue.find(e => e[1].freq >= 2);\n\n        if (twos) {\n            typeOfCombination = 4;\n            winCombination    = threes[1].slice(0, threes[1].freq).concat(twos[1].slice(0, twos[1].freq));\n            _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n            return winCombination;\n        }\n    };\n    \n    // [5] Flush - OK\n    for (let elem in groupedCardsBySuit) {\n        if (groupedCardsBySuit[elem].length === 5) {\n            typeOfCombination = 5;\n            winCombination    = groupedCardsBySuit[elem];\n            _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n            return winCombination;\n        }\n    }\n\n    // [6] Straight - OK\n    let newGrp = [];\n    for (let elem in groupedCardsByValue) {\n        newGrp.push(groupedCardsByValue[elem][1][0]);\n    }\n\n    let possibleStraight = containsStraight(newGrp);\n    if (possibleStraight.length === 5) {\n        typeOfCombination = 6;\n        winCombination    = possibleStraight;\n        _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n        return winCombination;\n    \n    }\n\n    if (possibleStraight.length === 4) {\n        let twoExists = (possibleStraight.find(el => el.rank === 2)) ? 1 : 0;\n\n        if (twoExists) {\n            let copiedGrpCardsByValue = _.cloneDeep(newGrp);\n        \n            let aceExists = copiedGrpCardsByValue.reduce((acc, elem) => { \n                acc += (elem.rank === 14) ? 1 : 0; \n                return acc; \n            }, 0);\n\n            if (aceExists === 1) {\n                let toCheck = copiedGrpCardsByValue.map(elem => (elem.rank === 14) ? {...elem, rank: 1} : elem);\n\n                toCheck.splice(toCheck.length - 1, 1, toCheck.splice(0, 1)[0]);\n                possibleStraight = containsStraight(toCheck);\n\n                typeOfCombination = 6;\n                winCombination    = possibleStraight;\n                _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n                return winCombination;\n            }\n        }\n    }\n\n    // [7] Three of a Kind - OK\n    let threeOfKind = [];\n    threeOfKind     = sameCardExistsNtimes(groupedCardsByValue, 3);\n\n    if (threeOfKind.length > 0) {\n        typeOfCombination = 7;\n        winCombination    = threeOfKind[1].slice(0, threeOfKind.freq);\n        _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n        return winCombination;\n    }\n\n    // [8] Two Pairs - OK\n    let twos = [];\n    twos     = groupedCardsByValue.filter(e => e[1].freq === 2);\n\n    if (twos.length >= 2) {\n        typeOfCombination = 8;\n        winCombination    = twos[0][1].concat(twos[1][1]);\n        _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n        return winCombination;\n    }\n\n    // [9] Pair - OK\n    if (twos.length === 1) {\n        typeOfCombination = 9;\n        winCombination    = twos[0][1].slice(0, twos[0][1].freq);\n        _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n        return winCombination;\n    } \n\n    // [10] High Card - OK\n    if (winCombination) {\n        typeOfCombination = 10;\n        winCombination    = groupedCardsByValue[0][1].slice(0, groupedCardsByValue[0][1].freq);\n        _.set(winCombination, 'typeOfCombination', typeOfCombination);\n\n        return winCombination;\n    }\n}\n\nexport const findWinner = (bySuit, byValues) => {\n    let res = findCombination(bySuit, byValues);\n    let acceptedCombinations = [];\n    acceptedCombinations.push(res);\n\n    return acceptedCombinations;\n}","import * as actionTypes from '../actionTypes';\nimport _                from 'lodash';\nimport { createCards, cardsToOpen, checkIfAll, shouldCheckForWinner, findWinner, updateObjectInArray, findMaxPot, allHaveSamePot, formatCards, printWinners, getWinnerIds } from '../utils';\n\nconst initialState = {\n    round: 0,\n    dealerId: -1,\n    cardCombinations: [\n        { code: 1,  title: 'Royal Flush'     },\n        { code: 2,  title: 'Straight Flush'  },\n        { code: 3,  title: 'Four of a Kind'  },\n        { code: 4,  title: 'Full House'      },\n        { code: 5,  title: 'Flush'           },\n        { code: 6,  title: 'Straight'        },\n        { code: 7,  title: 'Three of a Kind' },\n        { code: 8,  title: 'Two Pairs'       },\n        { code: 9,  title: 'Pair'            },\n        { code: 10, title: 'High Card'       }\n    ],\n    initCards: createCards(),\n    numOfPlayers: actionTypes.NUM_OF_PLAYERS,\n    firstPlayerId: null,\n    checkForWinner: 0,\n    winCombinations: [],\n    cards: [],\n    canUpdateTablePot: 1,\n    openBoardCards: 0,\n    openAllBoardCards: 0,\n    alreadyOpenedCards: 0,\n    players: [],\n    possibleWinners: [],\n    tablePot: 0,\n    potsCount: 0,\n    howManyPlayersChecked: 0\n};\n\nconst tableReducer = (state = initialState, action) => {\n    let cards                 = [];\n    let updatedCards          = [];\n    let checkForWinner        = 0;\n    let winCombinations       = [];\n    let openBoardCards        = 0;\n    let openAllBoardCards     = 0;\n    let alreadyOpenedCards    = 0;\n    let maxPot                = 0;\n    let activePlayers         = [];\n    let possibleWinners       = [];\n    let tablePot              = 0;\n    let potsCount             = 0;\n    let howManyPlayersChecked = 0;\n    let boardCards            = [];\n    let players;\n    let restPlayers;\n    let player;\n    let currentPlayer;\n    let playerId;\n    let canUpdateTablePot;\n\n    switch (action.type) {\n        case actionTypes.START_GAME:\n            return {\n                ...state,\n                round: 1\n            }\n\n        case actionTypes.SET_DEALER:\n            return {\n                ...state,\n                dealerId: action.payload\n            }\n\n        case actionTypes.RESET_BOARD_CARDS:\n            cards = [];\n            \n            return {\n                ...state,\n                cards: cards,\n            }\n\n        case actionTypes.STORE_BOARD_CARDS:\n            return {\n                ...state,\n                cards: state.cards.concat(action.payload)\n            }\n\n        case actionTypes.SET_FIRST_PLAYER:\n            return {\n                ...state,\n                firstPlayerId: action.payload\n            }\n\n        case actionTypes.RESET_FIRST_PLAYER:\n            return {\n                ...state,\n                firstPlayerId: null\n            }\n\n        case actionTypes.OPEN_CARDS:\n            cards        = [...state.cards];\n            updatedCards = cardsToOpen(cards, 'isVisible', action.payload);\n            \n            return {\n                ...state,\n                cards: updatedCards\n            }\n\n        case actionTypes.ALL_BOARD_CARDS_OPEN:\n            cards          = [...state.cards];\n            // checkForWinner = shouldCheckForWinner(cards, 'isVisible') === cards.length;\n            checkForWinner = checkIfAll(cards, 'isVisible', true) === cards.length;\n            boardCards     = [...state.cards];\n            players        = [...state.players];\n\n            if (checkForWinner) {\n                potsCount = state.potsCount;\n                potsCount = 0;\n                let updatedBoardCards = state.cards.slice();\n                let cardsToCheck = state.possibleWinners.map(elem => {\n                    return elem.cards.concat(updatedBoardCards.map(el => ({...el, belongsTo: elem.cards[0].belongsTo, isBoard: true})));\n                });\n\n                let e = cardsToCheck.map(el => formatCards(el));\n                let result = printWinners(e);\n\n                if (result.length >= 1) {\n                    let res       = result.map(elem => elem[0][0]);\n                    let bestCards = _.orderBy(res);\n\n                    let bestCombNum = bestCards.reduce((acc, elem) => { \n                        acc = (elem.typeOfCombination > acc) ? acc : elem.typeOfCombination; \n                        return acc; \n                    }, bestCards[0].typeOfCombination);\n\n                    let winCombinations = bestCards.filter(elem => elem.typeOfCombination === bestCombNum);\n                    let comb            = state.cardCombinations.filter(elem => elem.code === bestCombNum);\n                    let winnerIds       = getWinnerIds(winCombinations);\n\n                    alert(`The winning combination is ${_.get(comb[0], 'title')}. Winner(s) are player(s): ${winnerIds.map(elem => elem + 1)}`);\n        \n                    let winnerCards = winCombinations.map(elem => elem.slice(0, elem[0].typeOfCombination));\n        \n                    let updatedWinnerCards = winnerCards.map(elem => elem.map(el => ({...el, selected: true})));\n        \n                    // console.log(updatedWinnerCards);\n\n                    updatedWinnerCards.map(elem => elem.map(el => el.isBoard ? (boardCards.filter(e => e.value === el.value && e.suit === el.suit ? e.selected = true : null)) : null));\n                    updatedWinnerCards.map(elem => elem.map(el => !el.isBoard ? players.map(pl => pl.cards.filter(e => e.value === el.value && e.suit === el.suit ? e.selected = true : null)) : null));\n\n                    winCombinations = [];\n                    checkForWinner  = 0;\n                } \n            }\n\n            return {\n                ...state,\n                checkForWinner: checkForWinner,\n                potsCount: potsCount,\n                winCombinations: winCombinations,\n                checkForWinner: checkForWinner,\n                cards: boardCards,\n                players: players,\n                round: 0\n            }\n\n        case actionTypes.GET_WINNER:\n            winCombinations = [...state.winCombinations];\n            checkForWinner  = 0;\n\n            let a = findWinner(action.payload.cardsBySuit, action.payload.cardsByValue);\n            winCombinations.push(a);\n              \n            return {\n                ...state,\n                checkForWinner: checkForWinner,\n                winCombinations: winCombinations\n            }\n\n            case actionTypes.UPDATE_POTS_COUNT:\n                players   = [...state.players];\n                potsCount = state.potsCount;\n                potsCount += 1;\n    \n                let tmp = players.map(elem => ({...elem, changedPot: 0}));\n    \n                return {\n                    ...state,\n                    players: tmp,\n                    potsCount: potsCount\n                }\n    \n            case actionTypes.RESET_PLAYERS:\n                players = [];\n                \n                return {\n                    ...state,\n                    players: players\n                }\n        \n            case actionTypes.STORE_PLAYERS_CARDS:\n                players = action.payload;\n    \n                const smallBlindPlayer = players.find(pl => pl.isSmallBlind);\n                smallBlindPlayer.pot   = actionTypes.SMALL_BLIND_AMOUNT;\n    \n                const bigBlindPlayer = players.find(pl => pl.isBigBlind);\n                bigBlindPlayer.pot   = actionTypes.SMALL_BLIND_AMOUNT * 2;\n    \n                updateObjectInArray(players, smallBlindPlayer);\n                updateObjectInArray(players, bigBlindPlayer);\n    \n                return {\n                    ...state,\n                    players: state.players.concat(players)\n                }\n    \n            case actionTypes.INCREMENT_PLAYER_POT:\n                players = [...state.players];\n                player  = players.find(pl => pl.seq === action.payload);\n    \n                if (player.cash > 0 && player.pot >= player.potNotLessThan && player.pot + 1 <= player.maxPot + player.previousPot) {\n                    player.pot       += 1; \n                    player.cash      -= 1;\n                    player.changedPot = 1;\n                }\n    \n                if (player.cash > 0 && player.pot <= player.potNotLessThan) {\n                    if (player.cash >= player.potNotLessThan) {\n                        player.pot  = player.potNotLessThan;\n                        player.cash = player.cash - (player.potNotLessThan - player.previousPot);\n    \n                    } else {\n                        if (Math.abs(player.potNotLessThan - player.pot) <= player.cash) {\n                            player.pot   = player.potNotLessThan;\n                            player.cash -= Math.abs(player.potNotLessThan - player.previousPot); \n                        \n                        } else {\n                            player.pot  = player.pot + player.cash;\n                            player.cash = 0;\n                        }\n                    }\n                }\n    \n                player.changedPot = 1;\n    \n                if (player.changedPot === 1) {\n                    canUpdateTablePot = state.canUpdateTablePot; \n                    canUpdateTablePot = 1; \n                }\n    \n                updateObjectInArray(players, player);\n    \n                return {\n                    ...state,\n                    players: players,\n                    canUpdateTablePot: canUpdateTablePot\n                }\n    \n            case actionTypes.DECREMENT_PLAYER_POT:\n                players           = [...state.players];\n                player            = players.find(pl => pl.seq === action.payload);\n                canUpdateTablePot = state.canUpdateTablePot;\n    \n                if (player.pot - 1 >= player.potNotLessThan) {\n                    if (player.pot-1 !== player.previousPot) {\n                        player.pot  -= 1; \n                        player.cash += 1;\n        \n                        updateObjectInArray(players, player);\n                        \n                        canUpdateTablePot = 1; \n                    }\n    \n                } else {\n                    canUpdateTablePot = 0; \n                }\n    \n                return {\n                    ...state,\n                    players: players,\n                    canUpdateTablePot: canUpdateTablePot\n                }\n    \n            case actionTypes.EXIT_GAME:\n                players                   = [...state.players];\n                possibleWinners           = [...state.possibleWinners];\n                currentPlayer             = players.find(pl => pl.seq === action.payload);\n                currentPlayer.nextPlayer  = 0;\n                currentPlayer.isActive    = 0;\n                restPlayers               = players.filter(elem => elem.isActive && elem.cash > 0);\n                alreadyOpenedCards        = state.alreadyOpenedCards;\n                openBoardCards            = state.openBoardCards;\n                openAllBoardCards         = state.openAllBoardCards;\n                currentPlayer.previousPot = currentPlayer.previousPot;\n                currentPlayer.maxPot      = currentPlayer.maxPot;\n                howManyPlayersChecked     = state.howManyPlayersChecked;\n    \n                if (restPlayers.length >= 2) {\n                    let hasAnyonePot = restPlayers.reduce((acc, elem) => { acc += (elem.changedPot === 0) ? 0 : 1; return acc; }, 0);\n            \n                    if (hasAnyonePot === 0) {\n                        if (howManyPlayersChecked === restPlayers.length) {\n                            openBoardCards        = 1;\n                            howManyPlayersChecked = 0;\n                        }\n        \n                        playerId          = restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) !== -1 ? restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) : 0;\n                        player            = restPlayers[playerId];\n                        player.nextPlayer = 1;\n                        player.changedPot = 0;\n                    \n                    } else {\n                        playerId          = restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) !== -1 ? restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) : 0;\n                        player            = restPlayers[playerId];\n                        player.nextPlayer = 1;\n                        player.changedPot = 0;\n                        \n                        updateObjectInArray(players, player);\n    \n                        activePlayers = players.filter(elem => elem.isActive);\n                        maxPot        = findMaxPot(activePlayers, 'pot');\n    \n                        if (checkIfAll(restPlayers, 'pot', maxPot) === restPlayers.length && !alreadyOpenedCards) {\n                            openBoardCards     = 1;\n                            alreadyOpenedCards = 1;\n                        }\n                    }\n                } \n    \n                if (restPlayers.length <= 1) {\n                    possibleWinners   = players.filter(elem => elem.isActive);\n                    openAllBoardCards = 1;\n                }\n    \n                return {\n                    ...state,\n                    players: players,\n                    openBoardCards: openBoardCards,\n                    openAllBoardCards: openAllBoardCards,\n                    alreadyOpenedCards: alreadyOpenedCards,\n                    possibleWinners: possibleWinners,\n                    howManyPlayersChecked: howManyPlayersChecked\n                }\n    \n            case actionTypes.UPDATE_ALL_PLAYERS_CURRENT_POT:\n                players       = [...state.players];\n                activePlayers = players.filter(elem => elem.isActive && elem.cash >= 0);\n    \n                if (state.canUpdateTablePot === 1) {   \n                    const currentPot = findMaxPot(activePlayers, 'pot');\n    \n                    players.map(pl => {\n                        return pl.potNotLessThan = currentPot;\n                    });    \n                }\n    \n                return {\n                    ...state,\n                    players: players\n                }\n    \n            case actionTypes.RESET_TABLE_POT:\n                tablePot = 0;\n    \n                return {\n                    ...state,\n                    tablePot: tablePot\n                }\n    \n            case actionTypes.SET_TABLE_POT:\n                players       = [...state.players];\n                activePlayers = players.filter(elem => elem.isActive && elem.cash >= 0);\n                tablePot      = activePlayers.reduce((acc, elem) => { acc += elem.pot; return acc; }, 0);\n    \n                return {\n                    ...state,\n                    tablePot: tablePot\n                }\n    \n            case actionTypes.SET_NEXT_PLAYER:\n                players                   = [...state.players];\n                possibleWinners           = [...state.possibleWinners];\n                currentPlayer             = players.find(pl => pl.seq === action.payload);\n                restPlayers               = players.filter(elem => elem.isActive && elem.cash > 0);\n                openBoardCards            = state.openBoardCards;\n                openAllBoardCards         = state.openAllBoardCards;\n                alreadyOpenedCards        = state.alreadyOpenedCards;\n                alreadyOpenedCards        = 0;\n                currentPlayer.previousPot = currentPlayer.pot;\n                currentPlayer.maxPot      = currentPlayer.cash;\n                canUpdateTablePot         = state.canUpdateTablePot;\n                potsCount                 = state.potsCount;\n                howManyPlayersChecked     = state.howManyPlayersChecked;\n    \n                if ((currentPlayer.pot >= currentPlayer.potNotLessThan || currentPlayer.cash === 0) && currentPlayer.changedPot === 1) { \n                    howManyPlayersChecked = 0;\n    \n                    if (restPlayers.length >= 2) {\n                        playerId                 = restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) !== -1 ? restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) : 0;\n                        player                   = restPlayers[playerId];\n                        player.nextPlayer        = 1;\n                        currentPlayer.nextPlayer = 0;\n                        currentPlayer.changedPot = 1;\n    \n                        updateObjectInArray(players, player);\n                        activePlayers = players.filter(elem => elem.isActive);\n                        maxPot        = findMaxPot(activePlayers, 'pot');\n    \n                        if (checkIfAll(restPlayers, 'pot', maxPot) === restPlayers.length && !alreadyOpenedCards) {\n                            openBoardCards     = 1;\n                            alreadyOpenedCards = 1;\n                        }\n                    } \n                    \n                    if (restPlayers.length === 0) {\n                        // alert('next - vres nikiti');\n                        currentPlayer.nextPlayer = 0;\n                        possibleWinners          = players.filter(elem => elem.isActive);\n                        openAllBoardCards        = 1;\n                    } \n    \n                    if (restPlayers.length === 1 && currentPlayer.cash >= 0) {\n                        if (restPlayers[0].changedPot === 0) {\n                            currentPlayer.nextPlayer  = 0;\n                            restPlayers[0].nextPlayer = 1;\n                            restPlayers[0].changedPot = 1;\n                        \n                        } else {\n                            currentPlayer.nextPlayer = 0;\n                            // alert('next - vres nikiti');\n                            possibleWinners   = players.filter(elem => elem.isActive);\n                            openAllBoardCards = 1;\n                        }\n                    } \n                    \n                    possibleWinners   = players.filter(elem => elem.isActive);\n                    canUpdateTablePot = 1;\n    \n                \n                } else {\n                    let hasAnyonePot = restPlayers.reduce((acc, elem) => { acc += (elem.changedPot === 0) ? 0 : 1; return acc; }, 0);\n                    \n                    if (hasAnyonePot === 0) {\n                        howManyPlayersChecked += 1;\n    \n                        if (howManyPlayersChecked === restPlayers.length) {\n                            openBoardCards        = 1;\n                            howManyPlayersChecked = 0;\n                        }\n    \n                        playerId                 = restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) !== -1 ? restPlayers.findIndex(elem => elem.seq > currentPlayer.seq) : 0;\n                        player                   = restPlayers[playerId];\n                        player.nextPlayer        = 1;\n                        currentPlayer.nextPlayer = 0;\n                        currentPlayer.changedPot = 0;\n                        possibleWinners          = players.filter(elem => elem.isActive);\n                    }\n                }\n    \n                return {\n                    ...state,\n                    players: players,\n                    openBoardCards: openBoardCards,\n                    openAllBoardCards: openAllBoardCards,\n                    alreadyOpenedCards: alreadyOpenedCards,\n                    canUpdateTablePot: canUpdateTablePot,\n                    possibleWinners: possibleWinners,\n                    howManyPlayersChecked: howManyPlayersChecked\n                }\n    \n            case actionTypes.RESET_OPEN_CARDS_FLAGS:\n                return {\n                    ...state,\n                    openBoardCards: 0,\n                    openAllBoardCards: 0\n                }\n    \n            case actionTypes.NONE_NEXT_PLAYER:\n                let tmpPlayers = [...state.players];\n                players        = tmpPlayers.map(elem => ({...elem, nextPlayer: 0}));\n    \n                return {\n                    ...state,\n                    players: players\n                }\n    }\n\n    return state;\n}\n\nexport default tableReducer;\n\n","import React                            from 'react';\nimport ReactDOM                         from 'react-dom';\nimport App                              from './App';\nimport * as serviceWorker               from './serviceWorker';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider }                     from 'react-redux';\nimport tableReducer                     from './store/reducers/tableReducer';\n\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \nimport './index.css';\n\nconst rootReducer = combineReducers({\n    table: tableReducer\n});\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}